/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CLWindowGammaSample.java
 *
 * Created on 26-jul-2011, 0:00:48
 */
package igpuLab3;

import com.jogamp.common.nio.Buffers;
import com.jogamp.opencl.CLBuffer;
import com.jogamp.opencl.CLCommandQueue;
import com.jogamp.opencl.CLCommandQueue.Mode;
import com.jogamp.opencl.CLContext;
import com.jogamp.opencl.CLKernel;
import com.jogamp.opencl.CLPlatform;
import com.jogamp.opencl.CLProgram;
import com.jogamp.opencl.CLProgram.CompilerOptions;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.nio.FloatBuffer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;


/**
 *
 * @author Juan
 */
public class CLWindow extends javax.swing.JFrame {

    /** Creates new form CLWindowGammaSample */
    public CLWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 254, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static BufferedImage createImage(int width, int height, CLBuffer<FloatBuffer> buffer) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        float[] pixels = new float[buffer.getBuffer().capacity()];
        buffer.getBuffer().get(pixels).rewind();
        image.getRaster().setPixels(0, 0, width, height, pixels);
        return image;
    }
    
    public CLProgram program;
    public CLKernel kernel ;
    public CLBuffer<FloatBuffer> buffer;
    public CLContext context;
    public CLCommandQueue queue;
    public FloatBuffer fb;
    public BufferedImage image = null;
    
    private static void gammaCorrection(float gamma, CLCommandQueue queue, CLKernel kernel, CLBuffer<FloatBuffer> buffer, int localWorkSize, int globalWorkSize) {
       
        float scaleFactor = (float) Math.pow(255, 1.0f-gamma);
        
        // setup kernel
        kernel.putArg(buffer).putArg(gamma).putArg(scaleFactor).putArg(buffer.getNIOSize()).rewind();  
        
        queue.putWriteBuffer(buffer, false);                                      // upload image
        queue.put1DRangeKernel(kernel, 0, globalWorkSize, localWorkSize/*, list*/);   // execute program
        queue.putReadBuffer(buffer, true);                                        // read results back (blocking read)
        
        
    }
    
    private static InputStream getStreamFor(String filename) {
        return CLWindow.class.getResourceAsStream(filename);
    }
    
    public static BufferedImage readImage(String filename) throws IOException {
        return ImageIO.read(getStreamFor(filename));
    }
    
    private static int roundUp(int groupSize, int globalSize) {
        int r = globalSize % groupSize;
        if (r == 0) {
            return globalSize;
        } else {
            return globalSize + groupSize - r;
        }
    }
    
    @Override
    public void paint(Graphics g)
    {
      super.paint(g);
      
      if ((image!= null) && (buffer!=null))
      {     
            int localWorkSize = queue.getDevice().getMaxWorkGroupSize(); // Local work size dimensions
            int globalWorkSize = roundUp(localWorkSize, fb.capacity());  // rounded up to the nearest multiple of the localWorkSize
            
            
            // original lenna
           // show(image, 0, 50, "reference");
            
            // a few gamma corrected versions
            float gamma = 0.5f;
            gammaCorrection(gamma, queue, kernel, buffer, localWorkSize, globalWorkSize);
            BufferedImage bf = createImage(image.getWidth(), image.getHeight(), buffer);
            Graphics g2 = this.jPanel2.getGraphics();
            g2.drawImage(bf, 0, 0, rootPane);
      }

      
    }
    
    public void initialize() 
      {
          // find a CL implementation
        CLPlatform platform = CLPlatform.getDefault(/*type(CPU)*/);
        
        context = CLContext.create(platform.getMaxFlopsDevice());
        try {
            //load and compile program for the chosen device
            program = context.createProgram(getStreamFor("Gamma.cl"));
        } catch (IOException ex) {
            Logger.getLogger(CLWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
            program.build(CompilerOptions.FAST_RELAXED_MATH);
            assert program.isExecutable();
            
            // creade a command queue with benchmarking flag set
            queue = context.getDevices()[0].createCommandQueue(Mode.PROFILING_MODE);
            // create kernel and set function parameters
            kernel = program.createCLKernel("gamma");
            

      }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() 
                {

            public void run() {
                CLWindow instance = new CLWindow();
                instance.setVisible(true);
                instance.initialize();
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
